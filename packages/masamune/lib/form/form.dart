part of '/masamune.dart';

/// Create an extension method for [RefHasPage] to handle Query for form.
///
/// フォーム用のQueryを処理するための[RefHasPage]の拡張メソッドを作成します。
extension MasamuneFormRefHasPageExtensions on RefHasPage {
  @Deprecated(
    "It is no longer possible to use [form] by directly specifying [PageRef] or [WidgetRef]. Instead, use [ref.page.form] to specify the scope. [PageRef]や[WidgetRef]を直接指定しての[form]の利用はできなくなります。代わりに[ref.page.form]でスコープを指定しての利用を行ってください。",
  )
  FormController<TModel> form<TModel>(
    FormControllerQueryBase<TModel> query,
  ) {
    return page.query(query);
  }
}

/// Create an extension method for [PageScopedValueRef] to handle Query for form.
///
/// フォーム用のQueryを処理するための[PageScopedValueRef]の拡張メソッドを作成します。
extension MasamuneFormPageScopedValueRefExtensions on PageScopedValueRef {
  /// [FormController] is obtained by passing [FormControllerQueryBase] for the form generated by the builder.
  ///
  /// The state is always saved in page scope.
  ///
  /// ビルダーによりコード生成されたフォーム用の[FormControllerQueryBase]を渡すことにより状態を保持された[FormController]を取得します。
  ///
  /// かならずページスコープで状態が保存されます。
  ///
  /// ```dart
  /// final userController = ref.page.form(UserFormController.query()); // Get the user form controller.
  /// ```
  FormController<TModel> form<TModel>(
    FormControllerQueryBase<TModel> query,
  ) {
    return getScopedValue<FormController<TModel>,
        _FormQueryValue<FormController<TModel>>>(
      (ref) => _FormQueryValue<FormController<TModel>>(
        query: query,
        ref: ref,
        listen: query.listen,
        autoDisposeWhenUnreferenced: query.autoDisposeWhenUnreferenced,
      ),
      listen: query.listen,
      name: query.queryName,
    );
  }
}

/// Extension methods for [ControllerQueryBase<FormController>].
///
/// [ControllerQueryBase<FormController>]の拡張メソッドです。
extension FormControllerQueryBaseExtensions<TModel>
    on FormControllerQueryBase<TModel> {
  /// Get [FormController<TModel>] while monitoring it with the widget associated with [ref] in the same way as `ref.page.controller`.
  ///
  /// `ref.page.controller`と同じように[ref]に関連するウィジェットで監視を行いつつ[FormController<TModel>]を取得します。
  FormController<TModel> watch(RefHasPage ref) {
    return ref.page.form(this);
  }
}

/// Base class for creating state-to-state usage queries for [FormController] that are code-generated by the builder.
///
/// Basically, you can get a class that inherits from [ChangeNotifier].
///
/// ビルダーによりコード生成する[FormController]の状態間利用クエリを作成するためのベースクラス。
///
/// 基本的には[ChangeNotifier]を継承したクラスを取得することが出来ます。
abstract class FormControllerQueryBase<TModel>
    extends ControllerQueryBase<FormController<TModel>> {
  /// Base class for creating state-to-state usage queries for [FormController] that are code-generated by the builder.
  ///
  /// Basically, you can get a class that inherits from [ChangeNotifier].
  ///
  /// ビルダーによりコード生成する[FormController]の状態間利用クエリを作成するためのベースクラス。
  ///
  /// 基本的には[ChangeNotifier]を継承したクラスを取得することが出来ます。
  const FormControllerQueryBase();
}

@immutable
class _FormQueryValue<T> extends ScopedValue<T> {
  const _FormQueryValue({
    required this.query,
    required Ref ref,
    this.listen = false,
    this.autoDisposeWhenUnreferenced = false,
  }) : super(ref: ref);

  final ScopedQuery<T> query;
  final bool listen;
  final bool autoDisposeWhenUnreferenced;

  @override
  ScopedValueState<T, ScopedValue<T>> createState() =>
      _FormQueryValueState<T>();
}

class _FormQueryValueState<T> extends ScopedValueState<T, _FormQueryValue<T>> {
  _FormQueryValueState();

  late T _value;
  late T Function() _callback;

  @override
  bool get autoDisposeWhenUnreferenced => value.autoDisposeWhenUnreferenced;

  @override
  void initValue() {
    super.initValue();
    _callback = value.query(ref);
    _value = _callback();
    if (!value.query.listen) {
      return;
    }
    final val = _value;
    if (val is Listenable) {
      val.addListener(_handledOnUpdate);
    }
  }

  @override
  void didUpdateDescendant() {
    super.didUpdateDescendant();
    final oldVal = _value;
    if (value.query.listen && oldVal is Listenable) {
      oldVal.removeListener(_handledOnUpdate);
    }
    _value = _callback();
    final newVal = _value;
    if (value.query.listen && newVal is Listenable) {
      newVal.addListener(_handledOnUpdate);
    }
  }

  void _handledOnUpdate() {
    setState(() {});
  }

  @override
  void dispose() {
    super.dispose();
    if (!value.query.listen) {
      return;
    }
    final val = _value;
    if (val is Listenable) {
      val.removeListener(_handledOnUpdate);
      if (val is ChangeNotifier) {
        val.dispose();
      }
    }
  }

  @override
  T build() => _value;
}
