part of masamune;

/// Create an extension method for [AppRef] to handle Query for controllers and controller groups.
///
/// コントローラーやコントローラーグループ用のQueryを処理するための[AppRef]の拡張メソッドを作成します。
extension MasamuneControllerAppRefExtensions on AppRef {
  /// A [TController] whose state is retained is obtained by passing the [ControllerQueryBase] generated by the builder.
  ///
  /// ビルダーによりコード生成された[ControllerQueryBase]を渡すことにより状態を保持された[TController]を取得します。
  ///
  /// ```dart
  /// final userController = appRef.controller(UserController.query()); // Get the user controller.
  /// final userControllerGroup = appRef.controller(UserControllerGroup.query()); // Get the user controller group.
  /// ```
  TController controller<TController extends ChangeNotifier>(
    ControllerQueryBase<TController> query,
  ) {
    return watch(query.call(), name: query.name);
  }
}

/// Create extension methods for [PageRef] and [WidgetRef] in the **Application Scope** to handle Query for controllers and controller groups.
///
/// コントローラーやコントローラーグループ用のQueryを処理するための**アプリケーションスコープ**の[PageRef]や[WidgetRef]の拡張メソッドを作成します。
extension MasamuneControllerAppScopedValueRefExtensions on AppScopedValueRef {
  /// A [TController] whose state is retained is obtained by passing the [ControllerQueryBase] code generated by the builder.
  ///
  /// The state is managed in the application scope.
  ///
  /// Any changes to the controller are monitored and the widgets used are updated when changes are made.
  ///
  /// ビルダーによりコード生成された[ControllerQueryBase]を渡すことにより状態を保持された[TController]を取得します。
  ///
  /// アプリケーションスコープで状態は管理されます。
  ///
  /// コントローラーの変更はすべて監視され、変更が行われた際、利用したウィジェットは更新されます。
  ///
  /// ```dart
  /// final userController = ref.app.controller(UserController.query()); // Get the user controller.
  /// final userControllerGroup = ref.app.controller(UserControllerGroup.query()); // Get the user controller group.
  /// ```
  TController controller<TController extends ChangeNotifier>(
    ControllerQueryBase<TController> query,
  ) {
    return watch(query.call(), name: query.name);
  }
}

/// Create extension methods for [PageRef] and [WidgetRef] in **Page Scope** to handle Query for controllers and controller groups.
///
/// コントローラーやコントローラーグループ用のQueryを処理するための**ページスコープ**の[PageRef]や[WidgetRef]の拡張メソッドを作成します。
extension MasamuneControllerPageScopedValueRefExtensions on PageScopedValueRef {
  /// A [TController] whose state is retained is obtained by passing the [ControllerQueryBase] code generated by the builder.
  ///
  /// Since the state is managed in page scope, when a page is destroyed, the controller is also destroyed.
  ///
  /// Any changes to the controller are monitored and the widgets used are updated when changes are made.
  ///
  /// ビルダーによりコード生成された[ControllerQueryBase]を渡すことにより状態を保持された[TController]を取得します。
  ///
  /// ページスコープで状態は管理されるため、ページが破棄される際コントローラーも破棄されます。
  ///
  /// コントローラーの変更はすべて監視され、変更が行われた際、利用したウィジェットは更新されます。
  ///
  /// ```dart
  /// final userController = ref.page.controller(UserController.query()); // Get the user controller.
  /// final userControllerGroup = ref.page.controller(UserControllerGroup.query()); // Get the user controller group.
  /// ```
  TController controller<TController extends ChangeNotifier>(
    ControllerQueryBase<TController> query,
  ) {
    return watch(query.call(), name: query.name);
  }
}

/// Base class for creating state-to-state usage queries for controllers that are code-generated by the builder.
///
/// Basically, you can get a class that inherits from [ChangeNotifier].
///
/// ビルダーによりコード生成するコントローラーの状態間利用クエリを作成するためのベースクラス。
///
/// 基本的には[ChangeNotifier]を継承したクラスを取得することが出来ます。
abstract class ControllerQueryBase<TController extends ChangeNotifier> {
  /// Base class for creating state-to-state usage queries for controllers that are code-generated by the builder.
  ///
  /// Basically, you can get a class that inherits from [ChangeNotifier].
  ///
  /// ビルダーによりコード生成するコントローラーの状態間利用クエリを作成するためのベースクラス。
  ///
  /// 基本的には[ChangeNotifier]を継承したクラスを取得することが出来ます。
  const ControllerQueryBase();

  /// Create a callback to pass parameters to monitor the state with the `watch` method.
  ///
  /// 状態を`watch`メソッドで監視するためのパラメーターを渡すためのコールバックを作成します。
  TController Function(Ref ref) call();

  /// Returns a name to pass to [ScopedValue].
  ///
  /// [ScopedValue]に渡すための名前を返します。
  String get name => hashCode.toString();
}
