part of "/masamune.dart";

/// Create an extension method for [PageOrAppScopedValueOrAppRef] to handle Query for controllers and controller groups.
///
/// コントローラーやコントローラーグループ用のQueryを処理するための[PageOrAppScopedValueOrAppRef]の拡張メソッドを作成します。
extension MasamuneControllerPageOrAppScopedValueOrAppRefExtensions
    on PageOrAppScopedValueOrAppRef {
  /// A [TController] whose state is retained is obtained by passing the [ControllerQueryBase] generated by the builder.
  ///
  /// ビルダーによりコード生成された[ControllerQueryBase]を渡すことにより状態を保持された[TController]を取得します。
  ///
  /// ```dart
  /// final userController = appRef.controller(UserController.query()); // Get the user controller.
  /// final userControllerGroup = appRef.controller(UserControllerGroup.query()); // Get the user controller group.
  /// ```
  TController controller<TController extends Listenable>(
    ControllerQueryBase<TController> query, {
    bool? autoDisposeWhenUnreferenced,
  }) {
    return this.query(
      query,
      autoDisposeWhenUnreferenced: autoDisposeWhenUnreferenced,
    );
  }
}

/// Create an extension method for [QueryScopedValueRef] to handle Query for controllers and controller groups.
///
/// コントローラーやコントローラーグループ用のQueryを処理するための[QueryScopedValueRef]の拡張メソッドを作成します。
extension MasamuneControllerQueryScopedValueRefExtensions
    on QueryScopedValueRef<PageOrAppScopedValueOrAppRef> {
  /// A [TController] whose state is retained is obtained by passing the [ControllerQueryBase] generated by the builder.
  ///
  /// ビルダーによりコード生成された[ControllerQueryBase]を渡すことにより状態を保持された[TController]を取得します。
  ///
  /// ```dart
  /// final userController = appRef.controller(UserController.query()); // Get the user controller.
  /// final userControllerGroup = appRef.controller(UserControllerGroup.query()); // Get the user controller group.
  /// ```
  TController controller<TController extends Listenable>(
    ControllerQueryBase<TController> query, {
    bool? autoDisposeWhenUnreferenced,
  }) {
    return this.query(
      query,
      autoDisposeWhenUnreferenced: autoDisposeWhenUnreferenced,
    );
  }
}

/// Base class for creating state-to-state usage queries for controllers that are code-generated by the builder.
///
/// Basically, you can get a class that inherits from [ChangeNotifier].
///
/// ビルダーによりコード生成するコントローラーの状態間利用クエリを作成するためのベースクラス。
///
/// 基本的には[ChangeNotifier]を継承したクラスを取得することが出来ます。
abstract class ControllerQueryBase<TController extends Listenable>
    extends ChangeNotifierScopedQueryBase<TController,
        PageOrAppScopedValueOrAppRef> {
  /// Base class for creating state-to-state usage queries for controllers that are code-generated by the builder.
  ///
  /// Basically, you can get a class that inherits from [ChangeNotifier].
  ///
  /// ビルダーによりコード生成するコントローラーの状態間利用クエリを作成するためのベースクラス。
  ///
  /// 基本的には[ChangeNotifier]を継承したクラスを取得することが出来ます。
  const ControllerQueryBase()
      : super(
          _provider,
        );

  static TController _provider<TController extends Listenable>(Ref ref) {
    throw UnimplementedError();
  }
}
