part of masamune_ai_openai;

/// Role of OpenAI messages.
///
/// OpenAIのメッセージの役割。
enum OpenAIChatGPTRole {
  /// User.
  ///
  /// ユーザー。
  user,

  /// Assistant.ChatGPT.
  ///
  /// アシスタント。ChatGPT。
  assistant,

  /// System.
  ///
  /// システム。
  system,
}

/// Available models of ChatGPT.
///
/// ChatGPTの利用可能モデル。
enum OpenAIChatGPTModel {
  gpt35Turbo;

  /// Returns the actual name passed to Functions.
  ///
  /// Functionsに渡される実際の名前を返します。
  String get name {
    switch (this) {
      case OpenAIChatGPTModel.gpt35Turbo:
        return "gpt-3.5-turbo-0613";
    }
  }
}

/// [FunctionsAction] to send OpenAI's ChatGPT queries from the server side.
///
/// OpenAIのChatGPTのクエリをサーバー側から送るための[FunctionsAction]。
///
/// {@macro functions_action}
class OpenAIChatGPTFunctionsAction
    extends FunctionsAction<List<OpenAIChatGPTFunctionsActionMessage>> {
  /// FunctionsAction] to send OpenAI's ChatGPT queries from the server side.
  ///
  /// OpenAIのChatGPTのクエリをサーバー側から送るための[FunctionsAction]。
  ///
  /// {@macro functions_action}
  const OpenAIChatGPTFunctionsAction({
    required this.messages,
    this.model = OpenAIChatGPTModel.gpt35Turbo,
  });

  /// All messages exchanged so far.
  ///
  /// これまでのやりとりすべてのメッセージ。
  final List<OpenAIChatGPTFunctionsActionMessage> messages;

  /// AI Model.
  ///
  /// AIのモデル。
  final OpenAIChatGPTModel model;

  @override
  String get action => "openai_chat_gpt";

  @override
  DynamicMap? toMap() {
    return {
      "message": messages
          .map((e) => {
                "role": e.role.name,
                "content": e.text,
              })
          .toList(),
      "model": model.name,
    };
  }

  @override
  List<OpenAIChatGPTFunctionsActionMessage> toResponse(DynamicMap map) {
    try {
      if (map.isEmpty) {
        throw Exception("Failed to get response from openai_chat_gpt.");
      }

      final choices = map.getAsList<DynamicMap>("choices");
      if (choices.isEmpty) {
        throw Exception("Failed to get response from openai_chat_gpt.");
      }

      final token = map.getAsMap("usage").get("total_tokens", 0);
      final message = choices.first.getAsMap("message");
      final role = message.get("role", "");
      final content = message.get("content", "");
      return [
        ...messages,
        OpenAIChatGPTFunctionsActionMessage(
          role: OpenAIChatGPTRole.values
                  .firstWhereOrNull((item) => item.name == role) ??
              OpenAIChatGPTRole.user,
          text: content,
          token: token,
        ),
      ];
    } catch (e) {
      debugPrint(e.toString());
      rethrow;
    }
  }
}

/// Message object used in [OpenAIChatGPTFunctionsAction].
///
/// The [role] contains the role of the message, [text] the content of the message, and [token] the number of tokens generated by the message.
///
/// [OpenAIChatGPTFunctionsAction]で利用するメッセージオブジェクト。
///
/// [role]にはメッセージの役割を、[text]にはメッセージの内容を、[token]にはメッセージで発生したトークンの数が入ります。
class OpenAIChatGPTFunctionsActionMessage extends FunctionsActionResponse {
  /// Message object used in [OpenAIChatGPTFunctionsAction].
  ///
  /// The [role] contains the role of the message, [text] the content of the message, and [token] the number of tokens generated by the message.
  ///
  /// [OpenAIChatGPTFunctionsAction]で利用するメッセージオブジェクト。
  ///
  /// [role]にはメッセージの役割を、[text]にはメッセージの内容を、[token]にはメッセージで発生したトークンの数が入ります。
  const OpenAIChatGPTFunctionsActionMessage({
    required this.role,
    required this.text,
    this.token,
  });

  /// Role of the message.
  ///
  /// メッセージの役割。
  final OpenAIChatGPTRole role;

  /// Message Content.
  ///
  /// メッセージの内容。
  final String text;

  /// Tokens generated through the use of ChatGPT.
  ///
  /// ChatGPTの利用で発生したトークン。
  ///
  /// See also:
  ///   * https://openai.com/pricing
  final int? token;
}
